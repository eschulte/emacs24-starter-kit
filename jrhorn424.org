#+TITLE: Init File for user jrhorn424
#+OPTIONS: toc:nil num:nil ^:nil

This is *not* part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Jeffrey Horn
** Activate Starter Kit Extensions
#+begin_src emacs-lisp
  (starter-kit-load "python")
  (starter-kit-load "misc-recommended")
  (starter-kit-load "org")
#+end_src
** The Cheese Stands Alone
:PROPERTIES:
:ID: DCEDAE21-FF35-4E00-A129-FE41DF7CCEDA
:END:
Lone require statements.
  #+begin_src emacs-lisp
    (require 'info)
    (require 'boxquote)
    (require 'lisppaste)
    (require 'xscheme)
    (require 'dired) ; is there a more sensible way to trick this into
                                            ; auto-loading?
    (require 'ado-mode)
    (require 'autopair)
    (require 'deft)
   #+end_src
** That Terrible Color Theme Package
I had to manually add the code for color-theme-initialize from
color-theme 6.0 to 6.1.1. Or something like that. Anyway, initialize
it. 
#+begin_src emacs-lisp
  (require 'color-theme)
  (color-theme-initialize)
  
  (add-to-list 'load-path "~/.emacs.d/elpa/color-theme-6.6.1/themes") ;themes directory
  (require 'color-theme-subdued)
  (color-theme-subdued)
  ;; (require 'color-theme-less)
  ;; (color-theme-less)
#+end_src
** Markdown Mode
#+begin_src emacs-lisp
  (autoload 'markdown-mode "markdown-mode.el" "Major mode for editing Markdown files" t)
  (setq auto-mode-alist (cons '("\\.md" . markdown-mode) auto-mode-alist))
#+end_src
** [[http://sunsite.univie.ac.at/textbooks/octave/octave_34.html][Octave Mode]]
To begin using Octave mode for all `.m' files you visit, add the
following lines to a file loaded by Emacs at startup time, typically
your `~/.emacs' file:
#+begin_src emacs-lisp
  (autoload 'octave-mode "octave-mod" nil t)
  (setq auto-mode-alist
        (cons '("\\.m$" . octave-mode) auto-mode-alist))
#+end_src

Finally, to turn on the abbrevs, auto-fill and font-lock features
automatically, also add the following lines to one of the Emacs
startup files:
#+begin_src emacs-lisp
  (add-hook 'octave-mode-hook
            (lambda ()
              (abbrev-mode 1)
              (auto-fill-mode 1)
              (if (eq window-system 'x)
                  (font-lock-mode 1))))
#+end_src
** Custom Functions
*** Unfill Paragraph and Region
#+begin_src emacs-lisp
  (defun unfill-paragraph ()
    "Replace newline chars in current paragraph by single spaces.
  This command does the reverse of `fill-paragraph'."
    (interactive)
    (let ((fill-column 90002000))
      (fill-paragraph nil)))
  
  (defun unfill-region (start end)
    "Replace newline chars in region by single spaces.
  This command does the reverse of `fill-region'."
    (interactive "r")
    (let ((fill-column 90002000))
      (fill-region start end)))
  
  (global-set-key (kbd "C-c C-x q") 'unfill-region)
#+end_src
*** Recent files by ido
#+begin_src emacs-lisp
  (defun recentf-ido-find-file ()
  "Find a recent file using Ido."
  (interactive)
  (let* ((file-assoc-list
          (mapcar (lambda (x)
                    (cons (file-name-nondirectory x)
                          x))
                  recentf-list))
         (filename-list
          (remove-duplicates (mapcar #'car file-assoc-list)
                             :test #'string=))
         (filename (ido-completing-read "Choose recent file: "
                                        filename-list
                                        nil
                                        t)))
    (when filename
      (find-file (cdr (assoc filename
                             file-assoc-list))))))
#+end_src
** Session Management
*** Desktop
Currently maintained in Oh, and One More Thing.
*** Session
:PROPERTIES:
:ID: D958011D-229E-4944-B6C1-768C970B30DE
:END:
#+begin_src emacs-lisp
  (require 'session)
  (add-hook 'after-init-hook 'session-initialize)
#+end_src
** IRC with RCIRC
With help from [[http://www.emacswiki.org/emacs/rcircExampleSettings][EmacsWiki]].
*** Setup and options
:PROPERTIES:
:ID: C8EC84EF-8EED-47D9-943D-7D64FC4479CE
:END:
#+begin_src emacs-lisp
  (require 'rcirc)
  (setq rcirc-debug-flag t)
  (add-hook 'rcirc-mode-hook
             (lambda ()
               (set (make-local-variable 'scroll-conservatively)
                    8192)))
  (eval-after-load 'rcirc '(require 'rcirc-notify))
#+end_src
*** Delay Joining Channels
:PROPERTIES:
:ID: 572CC690-059E-4CB0-AC51-1247D55BF449
:END:
This prevents identd authentication issues when joining restricted
channels on connect.
#+begin_src emacs-lisp
  (defun rcirc-join-channels (process channels)
    "Hacked version to wait 10 seconds before joining CHANNELS."
    (lexical-let ((process process)
                  (channels channels))
      (run-at-time 10 nil
                   (lambda ()
                     (save-window-excursion
                       (with-rcirc-process-buffer process
                         (dolist (channel channels)
                           (rcirc-cmd-join
                            channel process))))))))
#+end_src
*** Auto-away
:PROPERTIES:
:ID: CA414166-8CC1-49D8-A185-3D12925F3ECE
:END:
#+begin_src emacs-lisp
  (defvar rcirc-auto-away-server-regexps nil
    "List of regexps to match servers for auto-away.")
  
  (defvar rcirc-auto-away-after 1800
    "Auto-away after this many seconds.")
  
  (defvar rcirc-auto-away-reason "idle"
    "Reason sent to server when auto-away.")
  
  (defun rcirc-auto-away ()
    (message "rcirc-auto-away")
    (rcirc-auto-away-1 rcirc-auto-away-reason)
    (add-hook 'post-command-hook 'rcirc-auto-unaway))
  
  (defun rcirc-auto-away-1 (reason)
    (let ((regexp (mapconcat (lambda (x) (concat "\\(" x "\\)")) 
                             rcirc-auto-away-server-regexps "\\|")))
      (dolist (process (rcirc-process-list))
        (when (string-match regexp (process-name process))
          (rcirc-send-string process (concat "AWAY :" reason))))))
  
  (defun rcirc-auto-unaway ()
    (remove-hook 'post-command-hook 'rcirc-auto-unaway)
    (rcirc-auto-away-1 ""))
  
  (run-with-idle-timer rcirc-auto-away-after t 'rcirc-auto-away)
  ;;(cancel-function-timers 'rcirc-auto-away)
#+end_src
** Scratch
:PROPERTIES:
:ID: B2F7225C-57A6-42EA-8A9C-49074ABC7ADD
:END:
When called, this nifty [[http://atomized.org/2010/08/scratch-buffers-for-emacs/][extension]] automatically creates a new scratch
buffer based on the mode of the current buffer. 
#+begin_src emacs-lisp
(autoload 'scratch "scratch" nil t)
#+end_src
** Org-mode
*** Setup
#+begin_src emacs-lisp
  (require 'org-exp)
  (require 'org-latex)
#+end_src
*** Bindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c v") 'org-velocity-read)
  (global-set-key (kbd "C-M-r") 'org-capture)
  (global-set-key (kbd "C-c SPC") 'deft)
#+end_src
*** Publishing
#+begin_src emacs-lisp
  (load-file "~/.emacs.d/org-projects.el")
#+end_src
** RefTex
#+begin_src emacs-lisp
  (defun org-mode-reftex-setup ()
    (load-library "reftex")
    (and (buffer-file-name)
         (file-exists-p (buffer-file-name))
         (reftex-parse-all))
    (define-key org-mode-map (kbd "C-c )") 'reftex-citation)
    )
  (add-hook 'org-mode-hook 'org-mode-reftex-setup)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)     ; with AUCTeX LaTeX mode
  (add-hook 'latex-mode-hook 'turn-on-reftex)     ; with Emacs latex mode
  (setq reftex-plug-into-AUCTeX t)
#+end_src
** CDLaTeX
#+begin_src emacs-lisp
  (autoload 'cdlatex-mode "cdlatex" "CDLaTeX Mode" t)
  (autoload 'turn-on-cdlatex "cdlatex" "CDLaTeX Mode" nil)
  (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)   ; with AUCTeX LaTeX mode
  (add-hook 'latex-mode-hook 'turn-on-cdlatex)   ; with Emacs latex mode
#+end_src
** Python
This overrides the default python major mode that ships with emacs.
#+begin_src emacs-lisp
  (setq auto-mode-alist (cons '("\\.py$" . python-mode) auto-mode-alist))
  (setq interpreter-mode-alist (cons '("python" . python-mode)
                                     interpreter-mode-alist))
  (autoload 'python-mode "python-mode" "Python editing mode." t)
#+end_src
** yasnippet
The starter-kit handles yasnippet very well. The following code adds
the ability to use =org-very-safe-expand= in a LaTeX indirect
buffer. Thanks to [[http://notes.seanwhitton.com/2010/12/making-yasnippet-and-cdlatex-mode-play-nice-together.html][Sean Whitton]].
#+begin_src emacs-lisp
  (defun yas/advise-indent-function (function-symbol)
    (eval `(defadvice ,function-symbol (around yas/try-expand-first activate)
             ,(format
               "Try to expand a snippet before point, then call `%s' as usual"
               function-symbol)
             (let ((yas/fallback-behavior nil))
               (unless (and (interactive-p)
                            (yas/expand))
                 ad-do-it)))))
  
  (yas/advise-indent-function 'cdlatex-tab)
#+end_src
** w3m
#+begin_src emacs-lisp
  (require 'w3m-load)
  (setq browse-url-browser-function 'w3m-browse-url)
  (autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
  (setq w3m-use-cookies t)
  ;;(require 'mime-w3m)
  ;; optional keyboard short-cut
  ;;(global-set-key "\C-xm" 'browse-url-at-point)
#+end_src
** <<<Oh, and One More Thing>>>
These commands should be last in the init file to minimize collateral
damage if they generate errors.

Commands which should only run in windowed emacsen:
#+begin_src emacs-lisp
  (when window-system
    ;; (tabbar-mode 0)
    ;; Emacs Desktop
    (desktop-save-mode 1)
    (setq desktop-save 'ask-if-exists)
    (setq desktop-path nil)
    (add-to-list 'desktop-path "~/.emacs.d/")
    ;; Browser
    (setq browse-url-browser-function 'browse-url-default-macosx-browser)
  
    (define-key dired-mode-map "o" 'dired-open-mac) ; is there something
                                          ; to add that will
                                          ; automatically call dired autoload?
    (defun dired-open-mac ()
      (interactive)
      (let ((file-name (dired-get-file-for-visit)))
        (if (file-exists-p file-name)
            (shell-command (concat "open '" file-name "'" nil ))))))
  (when (featurep 'aquamacs)
    (setq pop-up-frames nil)
    (setq aquamacs-save-options-on-quit nil)
    (setq pop-up-windows nil)
    (one-buffer-one-frame-mode -1)
    (tabbar-mode -1)
  )
#+end_src

Load up secret auth file.
#+begin_src emacs-lisp
 (org-babel-load-file "~/.emacs.d/secret.org")
#+end_src

#+begin_src emacs-lisp
 (server-start)  
#+end_src
** More Sensible Defaults
*** Set Custom File
Consider setting auto-insert-mode, but note that it is annoying when
org-mode exports new latex files. confirm-kill-emacs prevents
accidental exiting and debug-on-error and debug-on-quit are extremely
useful for obtaining assistance.

Having backups breaks hard and soft links. Disable it altogether to
prevent re-making links constantly.

Now managed in [[file:jrhorn424-custom.el]].
#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/jrhorn424-custom.el")
  (load custom-file)
#+end_src
*** Bindings
#+begin_src emacs-lisp
  (global-set-key "\C-cm" 'menu-bar-open)
  ;; (global-set-key (kbd "C-z") 'undo) ; use `fg` to resume a suspended emacs
#+end_src

